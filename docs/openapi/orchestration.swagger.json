{
  "swagger": "2.0",
  "info": {
    "title": "Coinbase Non-Custodial Staking API",
    "description": "Staking Service is a non-custodial staking service that aims to support multiple protocols and actions on them.",
    "version": "v1alpha1"
  },
  "tags": [
    {
      "name": "Protocol",
      "description": "Protocols details"
    },
    {
      "name": "Network",
      "description": "Networks details"
    },
    {
      "name": "Validator",
      "description": "Validators details"
    },
    {
      "name": "Action",
      "description": "Actions details"
    },
    {
      "name": "Workflow",
      "description": "Workflow management details"
    },
    {
      "name": "StakingService"
    }
  ],
  "host": "api.developer.coinbase.com",
  "basePath": "/staking",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1alpha1/protocols": {
      "get": {
        "summary": "List supported protocols",
        "description": "List supported protocols",
        "operationId": "listProtocols",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListProtocolsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Protocol"
        ]
      }
    },
    "/api/v1alpha1/viewStakingContext:view": {
      "get": {
        "summary": "Returns point-in-time context of staking data for an address",
        "description": "Returns point-in-time context of staking data for an address",
        "operationId": "ViewStakingContext",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ViewStakingContextResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "The address to fetch staking context for.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "network",
            "description": "The network to fetch staking context for.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "ethereumKilnStakingContextParameters.integratorContractAddress",
            "description": "Integrator contract address.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StakingContext"
        ]
      }
    },
    "/api/v1alpha1/{name}": {
      "get": {
        "summary": "Get workflow",
        "operationId": "getWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: projects/{project}/workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/workflows/[^/]+"
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/api/v1alpha1/{name}/refresh": {
      "post": {
        "summary": "Refresh the current step in a workflow",
        "description": "Refresh the current step in a workflow",
        "operationId": "refreshWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: projects/{project}/workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/workflows/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "step": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The index of the step to be refreshed."
                }
              },
              "description": "The request message for RefreshWorkflowStepRequest.",
              "required": [
                "step"
              ]
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/api/v1alpha1/{name}/step": {
      "post": {
        "summary": "Perform the next step in a workflow",
        "description": "Perform the next step in a workflow",
        "operationId": "updateWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: projects/{project}/workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/workflows/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "step": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The index of the step to be performed."
                },
                "data": {
                  "type": "string",
                  "description": "Transaction metadata. This is either the signed transaction or transaction hash depending on the workflow's broadcast method."
                }
              },
              "description": "The request message for PerformWorkflowStep.",
              "required": [
                "step",
                "data"
              ]
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/api/v1alpha1/{parent}/actions": {
      "get": {
        "summary": "List supported actions",
        "description": "List supported actions",
        "operationId": "listActions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListActionsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of actions.\nFormat: protocols/{protocol}/networks/{network}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+/networks/[^/]+"
          }
        ],
        "tags": [
          "Action"
        ]
      }
    },
    "/api/v1alpha1/{parent}/networks": {
      "get": {
        "summary": "List supported networks",
        "description": "List supported networks",
        "operationId": "listNetworks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListNetworksResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of networks.\nFormat: protocols/{protocol}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+"
          }
        ],
        "tags": [
          "Network"
        ]
      }
    },
    "/api/v1alpha1/{parent}/stakingTargets": {
      "get": {
        "summary": "List supported staking targets",
        "description": "List supported staking targets",
        "operationId": "listStakingTargets",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListStakingTargetsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of staking targets.\nFormat: protocols/{protocol}/networks/{network}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+/networks/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of staking targets to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 100 staking targets will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StakingTarget"
        ]
      }
    },
    "/api/v1alpha1/{parent}/workflows": {
      "get": {
        "summary": "List supported workflows",
        "operationId": "listWorkflows",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListWorkflowsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of networks.\nFormat: projects/{project}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "filter",
            "description": "[AIP-160](https://google.aip.dev/160) filter\nSupported fields:\n- string delegator_address: \"0x...\"\n- string validator_address: \"0x...\"\n- string action: \"stake\", \"unstake\"\n- string protocol: \"ethereum_kiln\"\n- string network: \"goerli\", \"mainnet\"\n- string amount: \"10000\"\n- string currency: \"ETH\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of workflows to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 100 workflows will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Workflow"
        ]
      },
      "post": {
        "summary": "Create workflow",
        "operationId": "createWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe workflow.\nFormat: projects/{project}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "workflow",
            "description": "The workflow to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow",
              "required": [
                "workflow"
              ]
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    }
  },
  "definitions": {
    "WaitStepOutputWaitUnit": {
      "type": "string",
      "enum": [
        "WAIT_UNIT_UNSPECIFIED",
        "WAIT_UNIT_SECONDS",
        "WAIT_UNIT_BLOCKS",
        "WAIT_UNIT_EPOCHS",
        "WAIT_UNIT_CHECKPOINTS"
      ],
      "default": "WAIT_UNIT_UNSPECIFIED",
      "description": "The unit of wait time.\n\n - WAIT_UNIT_UNSPECIFIED: Unspecified wait time.\n - WAIT_UNIT_SECONDS: Wait time measured in seconds.\n - WAIT_UNIT_BLOCKS: Wait time measured in blocks.\n - WAIT_UNIT_EPOCHS: Wait time measured in epochs.\n - WAIT_UNIT_CHECKPOINTS: Wait time measured in checkpoints."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1Action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Action.\nFormat: protocols/{protocolName}/networks/{networkName}/actions/{actionName}\nEx: protocols/polygon/networks/goerli/validators/stake"
        }
      },
      "description": "An Action resource, which represents an action you may take on a network,\nposted to a validator (e.g. stake, unstake)."
    },
    "v1alpha1Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The total value of the token."
        },
        "currency": {
          "type": "string",
          "description": "The currency of the token"
        }
      },
      "description": "The amount of a token you wish to perform an action\nwith."
    },
    "v1alpha1Contract": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Contract Address.\nFormat: protocols/{protocolName}/networks/{networkName}/stakingTargets/{contractName}\nEx: protocols/polygon/networks/goerli/stakingTargets/0x857679d69fE50E7B722f94aCd2629d80C355163d"
        },
        "address": {
          "type": "string",
          "description": "The contract address you may submit actions to."
        }
      },
      "description": "A Contract resource, which represents an active contract\nfor the given protocol network which you can submit an action\nto."
    },
    "v1alpha1EthereumKilnClaimRewardsParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to claim rewards for."
        },
        "integratorContractAddress": {
          "type": "string",
          "description": "The address of the integrator contract."
        }
      },
      "description": "The parameters required for the claim rewards action on Ethereum Kiln.",
      "title": "EthereumKiln: Claim Rewards Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress"
      ]
    },
    "v1alpha1EthereumKilnClaimStakeParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to claim stake for."
        },
        "integratorContractAddress": {
          "type": "string",
          "title": "The address of the integrator contract"
        }
      },
      "description": "The parameters required for the claim stake action on Ethereum Kiln.",
      "title": "EthereumKiln: Claim Stake Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress"
      ]
    },
    "v1alpha1EthereumKilnStakeParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to stake from."
        },
        "integratorContractAddress": {
          "type": "string",
          "description": "The address of the integrator contract."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of Ethereum to stake in wei."
        }
      },
      "description": "The parameters required for the stake action on Ethereum Kiln.",
      "title": "EthereumKiln: Stake Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress",
        "amount"
      ]
    },
    "v1alpha1EthereumKilnStakingContextDetails": {
      "type": "object",
      "properties": {
        "ethereumBalance": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The Ethereum balance of the address.\nThis can be used to gate the stake action to make sure the requested stake amount\nis less than ethereum_balance."
        },
        "integratorShareBalance": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The number of integrator shares owned by the address."
        },
        "integratorShareUnderlyingBalance": {
          "$ref": "#/definitions/v1alpha1Amount",
          "title": "The total Ethereum you can exchange for your integrator shares.\nThis can be used to gate the unstake action to make sure the requested unstake amount\nis less than integrator_share_underlying_balance"
        },
        "totalExitableEth": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The total amount of Ethereum you can redeem for all non-claimed vPool shares.\nThis along with the condition total_shares_pending_exit == fulfillable_share_count\ncan be used to gate the claim_stake action."
        },
        "totalSharesPendingExit": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The number of vPool shares are eligible to receive now or at a later point in time."
        },
        "fulfillableShareCount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The number of vPool shares you are able to claim now."
        }
      },
      "description": "The protocol specific details for an Ethereum Kiln staking context.",
      "title": "EthereumKiln: Staking context details"
    },
    "v1alpha1EthereumKilnStakingContextParameters": {
      "type": "object",
      "properties": {
        "integratorContractAddress": {
          "type": "string",
          "description": "Integrator contract address."
        }
      },
      "description": "The protocol specific parameters required for fetching a staking context.",
      "title": "EthereumKiln: Staking Context Parameters"
    },
    "v1alpha1EthereumKilnStakingParameters": {
      "type": "object",
      "properties": {
        "stakeParameters": {
          "$ref": "#/definitions/v1alpha1EthereumKilnStakeParameters",
          "description": "The parameters for stake action on Ethereum Kiln."
        },
        "unstakeParameters": {
          "$ref": "#/definitions/v1alpha1EthereumKilnUnstakeParameters",
          "description": "The parameters for unstake action on Ethereum Kiln."
        },
        "claimRewardsParameters": {
          "$ref": "#/definitions/v1alpha1EthereumKilnClaimRewardsParameters",
          "description": "The parameters for claim rewards action on Ethereum Kiln."
        },
        "claimStakeParameters": {
          "$ref": "#/definitions/v1alpha1EthereumKilnClaimStakeParameters",
          "description": "The parameters for claim stake action on Ethereum Kiln."
        }
      },
      "description": "The parameters needed for staking on Ethereum via Kiln.",
      "title": "EthereumKiln: Staking Parameters"
    },
    "v1alpha1EthereumKilnUnstakeParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to unstake from."
        },
        "integratorContractAddress": {
          "type": "string",
          "description": "The address of the integrator contract."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of Ethereum to unstake in wei."
        }
      },
      "description": "The parameters required for the unstake action on Ethereum Kiln.",
      "title": "EthereumKiln: Unstake Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress",
        "amount"
      ]
    },
    "v1alpha1ListActionsResponse": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Action"
          },
          "description": "The list of actions."
        }
      },
      "description": "The response message for ListActions."
    },
    "v1alpha1ListNetworksResponse": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Network"
          },
          "description": "The list of networks."
        }
      },
      "description": "The response message for ListNetworks."
    },
    "v1alpha1ListProtocolsResponse": {
      "type": "object",
      "properties": {
        "protocols": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Protocol"
          },
          "description": "The list of protocols."
        }
      },
      "description": "The response message for ListProtocols."
    },
    "v1alpha1ListStakingTargetsResponse": {
      "type": "object",
      "properties": {
        "stakingTargets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1StakingTarget"
          },
          "description": "The list of staking targets."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListStakingTargets."
    },
    "v1alpha1ListWorkflowsResponse": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Workflow"
          },
          "description": "The list of workflows."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListWorkflows."
    },
    "v1alpha1Network": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Network.\nFormat: protocols/{protocolName}/networks/{networkName}\nEx: protocols/polygon/networks/goerli"
        },
        "isMainnet": {
          "type": "boolean",
          "description": "Represents if the network is the mainnet network\nfor the given protocol."
        }
      },
      "title": "A Network resource, which represents a blockchain network.\n(e.g. mainnet, testnet, etc.)"
    },
    "v1alpha1NonceOptions": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string",
          "description": "The blockhash stored in the nonce account."
        },
        "nonceAccount": {
          "type": "string",
          "description": "The address of the nonce account."
        },
        "nonceAuthority": {
          "type": "string",
          "description": "The address of the nonce authority. If not provided, defaults to the nonce_account_address. Signs the transaction."
        }
      },
      "description": "The parameters required to use a durable transaction nonce for Solana transactions.",
      "title": "Solana: Nonce Options"
    },
    "v1alpha1PolygonClaimRewardsParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        }
      },
      "description": "The parameters required for claim rewards action on Polygon.",
      "title": "The parameters needed to claim rewards on Polygon.",
      "required": [
        "delegatorAddress",
        "validatorAddress"
      ]
    },
    "v1alpha1PolygonRestakeParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        }
      },
      "description": "The parameters required for unstake action on Polygon.",
      "title": "The parameters needed to restake on Polygon.",
      "required": [
        "delegatorAddress",
        "validatorAddress"
      ]
    },
    "v1alpha1PolygonStakeParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of\natomic units (e.g., Wei for Ether) as a base-10 number."
        }
      },
      "description": "The parameters required for stake action on Polygon.",
      "title": "The parameters needed to stake on Polygon.",
      "required": [
        "delegatorAddress",
        "validatorAddress",
        "amount"
      ]
    },
    "v1alpha1PolygonStakingParameters": {
      "type": "object",
      "properties": {
        "stakeParameters": {
          "$ref": "#/definitions/v1alpha1PolygonStakeParameters",
          "description": "The parameters for stake action on Polygon."
        },
        "unstakeParameters": {
          "$ref": "#/definitions/v1alpha1PolygonUnstakeParameters",
          "description": "The parameters for unstake action on Polygon."
        },
        "restakeParameters": {
          "$ref": "#/definitions/v1alpha1PolygonRestakeParameters",
          "description": "The parameters for restake action on Polygon."
        },
        "claimRewardsParameters": {
          "$ref": "#/definitions/v1alpha1PolygonClaimRewardsParameters",
          "description": "The parameters for claim rewards action on Polygon."
        }
      },
      "description": "The parameters needed for staking on Polygon."
    },
    "v1alpha1PolygonUnstakeParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of\natomic units (e.g., Wei for Ether) as a base-10 number."
        }
      },
      "description": "The parameters required for unstake action on Polygon.",
      "title": "The parameters needed to unstake on Polygon.",
      "required": [
        "delegatorAddress",
        "validatorAddress",
        "amount"
      ]
    },
    "v1alpha1Protocol": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Protocol.\nFormat: protocols/{protocolName}\nEx: protocols/polygon"
        }
      },
      "description": "A Protocol resource (e.g. polygon, ethereum, etc.)."
    },
    "v1alpha1SolanaCreateStakeAccountParameters": {
      "type": "object",
      "properties": {
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the new stake account which will be created. This address must not already exist. Signs the transaction."
        },
        "fromAddress": {
          "type": "string",
          "description": "The address of the account which will fund the stake account. Pays the transaction fee. Signs the transaction."
        },
        "stakeAuthority": {
          "type": "string",
          "description": "The address of the account which will be granted signing authority over staking operations on the new stake account. If not provided, defaults to the from_address."
        },
        "withdrawAuthority": {
          "type": "string",
          "description": "The address of the account which will be granted signing authority over withdrawing inactive stake from the new stake account. If not provided, defaults to the from_address."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount to fund the stake account with, in Lamports."
        },
        "nonceOptions": {
          "$ref": "#/definitions/v1alpha1NonceOptions",
          "description": "The parameters required to use a durable transaction nonce for Solana transactions."
        }
      },
      "description": "The parameters required for the create stake account action on Solana.",
      "title": "Solana: Create Stake Account Parameters",
      "required": [
        "stakeAccountAddress",
        "fromAddress",
        "amount"
      ]
    },
    "v1alpha1SolanaDeactivateStakeParameters": {
      "type": "object",
      "properties": {
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account which will have its stake deactivated. Stake must be currently active."
        },
        "stakeAuthority": {
          "type": "string",
          "description": "The address of the account which has signing authority over staking operations on the stake account. Signs the transaction."
        },
        "nonceOptions": {
          "$ref": "#/definitions/v1alpha1NonceOptions",
          "description": "The parameters required to use a durable transaction nonce for Solana transactions."
        }
      },
      "description": "The parameters required for the deactivate stake action on Solana.",
      "title": "Solana: Deactivate Stake Parameters",
      "required": [
        "stakeAccountAddress",
        "stakeAuthority"
      ]
    },
    "v1alpha1SolanaDelegateStakeParameters": {
      "type": "object",
      "properties": {
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account which will be delegating its stake."
        },
        "voteAccountAddress": {
          "type": "string",
          "description": "The address of the validator's vote account to which the stake will be delegated."
        },
        "stakeAuthority": {
          "type": "string",
          "description": "The address of the account which has signing authority over staking operations on the stake account. Signs the transaction."
        },
        "nonceOptions": {
          "$ref": "#/definitions/v1alpha1NonceOptions",
          "description": "The parameters required to use a durable transaction nonce for Solana transactions."
        }
      },
      "description": "The parameters required for the delegate stake action on Solana.",
      "title": "Solana: Delegate Stake Parameters",
      "required": [
        "stakeAccountAddress",
        "voteAccountAddress",
        "stakeAuthority"
      ]
    },
    "v1alpha1SolanaMergeStakeParameters": {
      "type": "object",
      "properties": {
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account will be merged into and have stake added to it."
        },
        "sourceStakeAccountAddress": {
          "type": "string",
          "description": "The address of the source stake account which will have no longer exist after the merge."
        },
        "stakeAuthority": {
          "type": "string",
          "description": "The address of the account which has signing authority over staking operations on the stake account. Signs the transaction."
        },
        "nonceOptions": {
          "$ref": "#/definitions/v1alpha1NonceOptions",
          "description": "The parameters required to use a durable transaction nonce for Solana transactions."
        }
      },
      "description": "The parameters required for merge stake action on Solana.",
      "title": "Solana: Merge Stake Parameters",
      "required": [
        "stakeAccountAddress",
        "sourceStakeAccountAddress",
        "stakeAuthority"
      ]
    },
    "v1alpha1SolanaSplitStakeParameters": {
      "type": "object",
      "properties": {
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account will be split and have its stake removed."
        },
        "newStakeAccountAddress": {
          "type": "string",
          "description": "The address of the new stake account which will be created and have the stake added to it."
        },
        "stakeAuthority": {
          "type": "string",
          "description": "The address of the account which has signing authority over staking operations on the stake account. Signs the transaction."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of stake to split, in Lamports."
        },
        "nonceOptions": {
          "$ref": "#/definitions/v1alpha1NonceOptions",
          "description": "The parameters required to use a durable transaction nonce for Solana transactions."
        }
      },
      "description": "The parameters required for split stake action on Solana.",
      "title": "Solana: Split Stake Parameters",
      "required": [
        "stakeAccountAddress",
        "newStakeAccountAddress",
        "stakeAuthority",
        "amount"
      ]
    },
    "v1alpha1SolanaStakingParameters": {
      "type": "object",
      "properties": {
        "createStakeParameters": {
          "$ref": "#/definitions/v1alpha1SolanaCreateStakeAccountParameters",
          "description": "The parameters for create stake account action on Solana."
        },
        "delegateStakeParameters": {
          "$ref": "#/definitions/v1alpha1SolanaDelegateStakeParameters",
          "description": "The parameters for delegate stake action on Solana."
        },
        "deactivateStakeParameters": {
          "$ref": "#/definitions/v1alpha1SolanaDeactivateStakeParameters",
          "description": "The parameters for deactivate stake action on Solana."
        },
        "withdrawStakeParameters": {
          "$ref": "#/definitions/v1alpha1SolanaWithdrawStakeParameters",
          "description": "The parameters for withdraw stake action on Solana."
        },
        "splitStakeParameters": {
          "$ref": "#/definitions/v1alpha1SolanaSplitStakeParameters",
          "description": "The parameters for split stake action on Solana."
        },
        "mergeStakeParameters": {
          "$ref": "#/definitions/v1alpha1SolanaMergeStakeParameters",
          "description": "The parameters for merge stake action on Solana."
        }
      },
      "description": "The parameters needed for staking on Solana.",
      "title": "Solana: Staking Parameters"
    },
    "v1alpha1SolanaWithdrawStakeParameters": {
      "type": "object",
      "properties": {
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account from which stake will be withdrawn. Stake must be currently inactive."
        },
        "recipientAddress": {
          "type": "string",
          "description": "The address of the recipient account which will receive the withdrawn stake."
        },
        "withdrawAuthority": {
          "type": "string",
          "description": "The address of the account which has signing authority over withdrawing inactive stake from the stake account. Signs the transaction."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount to withdraw from the stake account, in Lamports."
        },
        "nonceOptions": {
          "$ref": "#/definitions/v1alpha1NonceOptions",
          "description": "The parameters required to use a durable transaction nonce for Solana transactions."
        }
      },
      "description": "The parameters required for the withdraw stake action on Solana.",
      "title": "Solana: Withdraw Stake Parameters",
      "required": [
        "stakeAccountAddress",
        "recipientAddress",
        "withdrawAuthority",
        "amount"
      ]
    },
    "v1alpha1StakingTarget": {
      "type": "object",
      "properties": {
        "validator": {
          "$ref": "#/definitions/v1alpha1Validator",
          "description": "A validator to stake to."
        },
        "contract": {
          "$ref": "#/definitions/v1alpha1Contract",
          "description": "A contract to send a staking action to."
        }
      },
      "description": "A Staking Target represents a destination that you perform an action on related to staking."
    },
    "v1alpha1TxStepOutput": {
      "type": "object",
      "properties": {
        "unsignedTx": {
          "type": "string",
          "description": "The unsigned transaction which was signed in order to be broadcasted.",
          "readOnly": true
        },
        "signedTx": {
          "type": "string",
          "description": "The signed transaction which was asked to be broadcasted.",
          "readOnly": true
        },
        "txHash": {
          "type": "string",
          "description": "The hash of the broadcasted transaction.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1alpha1TxStepOutputState",
          "description": "The state of the transaction step.",
          "readOnly": true
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message if the transaction step failed.",
          "readOnly": true
        }
      },
      "description": "The details of a transaction being constructed and broadcasted to the network."
    },
    "v1alpha1TxStepOutputState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_NOT_CONSTRUCTED",
        "STATE_CONSTRUCTED",
        "STATE_PENDING_SIGNING",
        "STATE_SIGNED",
        "STATE_BROADCASTING",
        "STATE_CONFIRMING",
        "STATE_CONFIRMED",
        "STATE_FINALIZED",
        "STATE_FAILED",
        "STATE_SUCCESS",
        "STATE_CANCELING",
        "STATE_CANCELED",
        "STATE_CANCEL_FAILED",
        "STATE_FAILED_REFRESHABLE",
        "STATE_REFRESHING",
        "STATE_PENDING_EXT_BROADCAST"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "State defines an enumeration of states for a staking transaction.\n\n - STATE_UNSPECIFIED: Unspecified transaction state, this is for backwards compatibility.\n - STATE_NOT_CONSTRUCTED: Tx has not yet been constructed in the backend.\n - STATE_CONSTRUCTED: Tx construction is over in the backend.\n - STATE_PENDING_SIGNING: Tx is waiting to be signed.\n - STATE_SIGNED: Tx has been signed and returned to the backend.\n - STATE_BROADCASTING: Tx is being broadcasted to the network.\n - STATE_CONFIRMING: Tx is waiting for confirmation.\n - STATE_CONFIRMED: Tx has been confirmed to be included in a block.\n - STATE_FINALIZED: Tx has been finalized.\n - STATE_FAILED: Tx construction or broadcasting failed.\n - STATE_SUCCESS: Tx has been successfully executed.\n - STATE_CANCELING: Tx is being canceled.\n - STATE_CANCELED: Tx has been canceled.\n - STATE_CANCEL_FAILED: Tx cancellation failed.\n - STATE_FAILED_REFRESHABLE: Tx failed but can be refreshed.\n - STATE_REFRESHING: Tx is being refreshed.\n - STATE_PENDING_EXT_BROADCAST: Tx is waiting to be externally broadcasted by the customer."
    },
    "v1alpha1Validator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Validator.\nFormat: protocols/{protocolName}/networks/{networkName}/stakingTargets/{validatorName}\nEx: protocols/polygon/networks/goerli/stakingTargets/0x857679d69fE50E7B722f94aCd2629d80C355163d"
        },
        "address": {
          "type": "string",
          "description": "The public address of the validator."
        },
        "commissionRate": {
          "type": "number",
          "format": "float",
          "title": "The rate of commission for the validator"
        }
      },
      "description": "A Validator resource represents an active validator for the given protocol network."
    },
    "v1alpha1ViewStakingContextResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address you are getting a staking context for."
        },
        "ethereumKilnStakingContextDetails": {
          "$ref": "#/definitions/v1alpha1EthereumKilnStakingContextDetails",
          "description": "EthereumKiln staking context details."
        }
      },
      "description": "The response message for the ViewStakingContext request.",
      "required": [
        "address",
        "ethereumKilnStakingContextDetails"
      ]
    },
    "v1alpha1WaitStepOutput": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "int64",
          "description": "The beginning of wait period.",
          "readOnly": true
        },
        "current": {
          "type": "string",
          "format": "int64",
          "description": "The current wait progress.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "format": "int64",
          "description": "The target wait end point.",
          "readOnly": true
        },
        "unit": {
          "$ref": "#/definitions/WaitStepOutputWaitUnit",
          "description": "The wait unit (like checkpoint, block, epoch etc).",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1alpha1WaitStepOutputState",
          "description": "The state of the wait step.",
          "readOnly": true
        }
      },
      "description": "The output details of a step where we wait for some kind of on-chain activity to finish like reaching a certain checkpoint, epoch or block."
    },
    "v1alpha1WaitStepOutputState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_NOT_STARTED",
        "STATE_IN_PROGRESS",
        "STATE_COMPLETED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "WaitStepState defines an enumeration of states for a wait step.\n\n - STATE_UNSPECIFIED: Unspecified wait step state.\n - STATE_NOT_STARTED: Wait step has not started.\n - STATE_IN_PROGRESS: Wait step is in-progress.\n - STATE_COMPLETED: Wait step completed."
    },
    "v1alpha1Workflow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the workflow.\nFormat: projects/{projectUUID}/workflows/{workflowUUID}\nEx: projects/ 123e4567-e89b-12d3-a456-426614174000/workflows/123e4567-e89b-12d3-a456-426614174000",
          "readOnly": true
        },
        "action": {
          "type": "string",
          "title": "The resource name of the action being\nperformed.\nFormat: protocols/{protocol}/networks/{network}/actions/{action}"
        },
        "polygonStakingParameters": {
          "$ref": "#/definitions/v1alpha1PolygonStakingParameters",
          "description": "Polygon staking parameters."
        },
        "solanaStakingParameters": {
          "$ref": "#/definitions/v1alpha1SolanaStakingParameters",
          "description": "Solana staking parameters."
        },
        "ethereumKilnStakingParameters": {
          "$ref": "#/definitions/v1alpha1EthereumKilnStakingParameters",
          "description": "EthereumKiln staking parameters."
        },
        "state": {
          "$ref": "#/definitions/v1alpha1WorkflowState",
          "description": "The current state of the workflow.",
          "readOnly": true
        },
        "currentStepId": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the current step.",
          "readOnly": true
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1WorkflowStep"
          },
          "description": "The list of steps for this workflow.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the workflow was created.",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the workflow was last updated.",
          "readOnly": true
        },
        "skipBroadcast": {
          "type": "boolean",
          "description": "Flag to skip tx broadcast to network on behalf of the user. Use this flag if you instead prefer to broadcast signed txs on your own."
        },
        "completeTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the workflow completed.",
          "readOnly": true
        }
      },
      "description": "A Workflow resource.",
      "required": [
        "action",
        "polygonStakingParameters",
        "solanaStakingParameters",
        "ethereumKilnStakingParameters"
      ]
    },
    "v1alpha1WorkflowState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_IN_PROGRESS",
        "STATE_WAITING_FOR_SIGNING",
        "STATE_COMPLETED",
        "STATE_FAILED",
        "STATE_CANCELING",
        "STATE_CANCELED",
        "STATE_CANCEL_FAILED",
        "STATE_FAILED_REFRESHABLE",
        "STATE_WAITING_FOR_EXT_BROADCAST"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Unspecified workflow state, this is for backwards compatibility.\n - STATE_IN_PROGRESS: In Progress represents a workflow that is currently in progress.\n - STATE_WAITING_FOR_SIGNING: Waiting for signing represents the workflow is waiting on the consumer to sign and return the corresponding signed tx.\n - STATE_COMPLETED: Completed represents the workflow has completed.\n - STATE_FAILED: Failed represents the workflow has failed.\n - STATE_CANCELING: Canceling represents the workflow is being canceled.\n - STATE_CANCELED: Canceled represents the workflow has been canceled.\n - STATE_CANCEL_FAILED: Cancel failed represents the workflow failed to cancel.\n - STATE_FAILED_REFRESHABLE: Failed refreshable represents the workflow failed but can be refreshed.\n - STATE_WAITING_FOR_EXT_BROADCAST: Waiting for external broadcast represents the workflow is waiting for the customer to broadcast a tx and return its corresponding tx hash.",
      "title": "The state of a workflow\nExample workflow states:\nIN_PROGRESS -\u003e WAITING_FOR_SIGNING -\u003e IN_PROGRESS -\u003e COMPLETED\n.................................................|-\u003e FAILED\nIN_PROGRESS -\u003e WAITING_FOR_SIGNING -\u003e CANCELING -\u003e CANCELED\n...............................................|-\u003e CANCEL_FAILED"
    },
    "v1alpha1WorkflowStep": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human readable name of the step.",
          "readOnly": true
        },
        "txStepOutput": {
          "$ref": "#/definitions/v1alpha1TxStepOutput",
          "description": "The tx step output (e.g. transaction metadata such as unsigned tx, signed tx etc).",
          "readOnly": true
        },
        "waitStepOutput": {
          "$ref": "#/definitions/v1alpha1WaitStepOutput",
          "description": "The waiting details for any kind like how many checkpoints away for unbonding etc.",
          "readOnly": true
        }
      },
      "description": "The information for a step in the workflow.",
      "title": "The information for a step in the workflow"
    }
  }
}
